<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" 
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.0.xsd
">
	<context:component-scan base-package="com.zendaimoney.thirdpp.notify">
	</context:component-scan>
	<!-- spring数据源及事务配置,采用alibaba druid -->
	<!-- JNDI方式配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="${jndiName}"></property> </bean> -->

	<!-- 支持多数据源配置，以下是二个数据源的示例：dataSource,dateSource1 -->
	<!-- 数据源连接基本信息来自config/jdbc.properties。 -->
	<!-- 注意：在正式环境下发布必须使用应用服务器的JNDI数据源，删除jdbc.properties，避免数据库连接信息泄露风险 -->

	<!-- 数据源一配置：dataSource1 BEGIN -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 密码加密，必须有filter属性，否则数据库拒绝连接 -->
		<property name="filters" value="config" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 关闭长时间不使用的连接 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" /> <!-- 1200秒，也就是20分钟 -->
		<property name="logAbandoned" value="${jdbc.logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->
		<!-- 连接属性 -->
	    <property name="connectionProperties" value="${jdbc.connectionProperties}"/>

	</bean>

	<!-- iBATIS sqlMapClient config -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation">
			<value>classpath:conf/SqlMapConfig.xml</value>
		</property>
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 数据源一配置：dataSource1 END -->


	<!-- 配置事务管理器 ，要注意, 为事务管理器指定的 DataSource 必须和用来创建 SqlSessionFactoryBean 的 
		是同一个数据源,否则事务管理器就无法工作了。 多数据源的时候，要实现事务管理，需要满足： 1、使用weblogic等应用服务器（tomcat不支持）， 
		2、使用JNDI，不能使用其他方式， 3、使用JTATransactionManager,如下： 事务管理器配置，多数据源JTA事务 <bean 
		id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/> 
		使用annotation定义事务 <ta:annotion-driven transaction-manager="transactionManager"/> -->

	<!-- 单数据源事务管理器配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解方式配置事物 -->
	 <tx:annotation-driven transaction-manager="transactionManager" /> 
	 
	 <import resource="classpath:spring/spring-rabbitmq-consumer.xml"/>
	 <import resource="classpath:spring/spring-rabbitmq-producter.xml"/>

</beans>